{"version":3,"sources":["assets/xyz-logo.png","redux/index.js","redux/config.js","views/login/Login.js","views/login/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","persistConfig","key","storage","whitelist","rootReducer","combineReducers","persistReducer","history","createBrowserHistory","composeSetup","compose","store","createStore","applyMiddleware","thunk","routerMiddleware","persistor","persistStore","useStyles","makeStyles","theme","root","margin","spacing","withSnackbar","Login","enqueueSnackbar","useState","username","setUsername","password","setPassword","className","src","clientLogo","alt","TextField","label","fullWidth","variant","onChange","e","target","value","type","Button","color","onClick","length","developerUser","JSON","parse","localStorage","getItem","alert","createMuiTheme","palette","primary","blue","connect","state","dispatch","useEffect","setItem","stringify","ThemeProvider","maxSnack","path","component","login","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,sC,0OCKrCC,EAAgB,CACpBC,IAAK,OACLC,Q,OAAAA,EACAC,UAAW,IAaPC,EAAcC,YAAgB,IAWrBC,cAAeN,EAAeI,GCzBhCG,EAAUC,cAEjBC,EAA6KC,IACtKC,EAAQC,YACnBR,EACAK,EACEI,YACEC,IACAC,YAAiBR,MAMVS,EAAYC,YAAaN,G,qFCbhCO,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,SA+DbC,ICzEAC,EDyEAD,aA1Df,YAAqC,IAApBE,EAAmB,EAAnBA,gBAAmB,GAClBR,IAEgBS,mBAAS,KAHP,mBAG3BC,EAH2B,KAGjBC,EAHiB,OAIFF,mBAAS,IAJP,mBAI3BG,EAJ2B,KAIjBC,EAJiB,KAwBlC,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,uBACb,yBAAKC,IAAKC,IAAYC,IAAI,iBAE5B,yBAAKH,UAAU,wBACb,0BAAMA,UAAU,eACd,wBAAIA,UAAU,gBAAd,qBACA,yBAAKA,UAAU,iBACb,kBAACI,EAAA,EAAD,CACEC,MAAM,UACNC,WAAS,EACTC,QAAQ,WACRC,SAAU,SAACC,GAAD,OAAOZ,EAAYY,EAAEC,OAAOC,WAG1C,yBAAKX,UAAU,iBACb,kBAACI,EAAA,EAAD,CACEC,MAAM,gBACNO,KAAK,WACLN,WAAS,EACTC,QAAQ,WACRC,SAAU,SAACC,GAAD,OAAOV,EAAYU,EAAEC,OAAOC,WAG1C,kBAACE,EAAA,EAAD,CAAQN,QAAQ,YAAYO,MAAM,UAAUC,QA3C/B,SAACN,GACpB,GAAKb,EAASoB,QAAWlB,EAASkB,OAE3B,CACL,IAAMC,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,gBAEpDJ,EAAcrB,WAAaA,GAC3BqB,EAAcnB,WAAaA,EAE3BwB,MAAM,UAEN5B,EAAgB,sCAAoC,CAClDa,QAAS,eAVbb,EAAgB,mCAAoC,CAAEa,QAAS,YAyC3D,gB,gBEhDJnB,EAAQmC,YAAe,CAC3BC,QAAS,CACPC,QAASC,OA0Bb,IAGeC,eAHO,SAACC,GAAD,MAAY,MACT,SAACC,GAAD,MAAe,KAEzBF,EAzBf,WAQE,OAPAG,qBAAU,WAKRV,aAAaW,QAAQ,cAAeb,KAAKc,UAJnB,CACpBpC,SAAU,MACVE,SAAU,WAGX,IAED,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAad,UAAWA,GACtB,kBAACiD,EAAA,EAAD,CAAe7C,MAAOA,GACpB,kBAAC,IAAD,CAAkB8C,SAAU,GAC1B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWC,YCzBrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUlE,MAAOA,GACf,kBAAC,EAAD,QAGJmE,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a0296432.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/xyz-logo.a6cd1612.png\";","import { combineReducers } from \"redux\";\n// import { connectRouter } from \"connected-react-router\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [],\n};\n\n//Reducer imports here\n// import authentication from \"./reducers/authentication\";\n// import customers from \"./reducers/customers\";\n// import products from \"./reducers/products\";\n// import warehouses from \"./reducers/warehouses\";\n// import orders from \"./reducers/orders\";\n// import users from \"./reducers/users\";\n// import decreases from './reducers/decreases'\n// import sellmode from './reducers/sellmode'\n\nconst rootReducer = combineReducers({\n  // authentication,\n  // customers,\n  // products,\n  // warehouses,\n  // orders,\n  // users,\n  // decreases,\n  // sellmode\n});\n\nexport default persistReducer(persistConfig, rootReducer);\n","import { createBrowserHistory } from \"history\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport thunk from \"redux-thunk\";\nimport { persistStore } from \"redux-persist\";\nimport rootReducer from \"./index\";\n\nexport const history = createBrowserHistory();\n\nconst composeSetup =process.env.NODE_ENV !== \"production\" &&typeof window === \"object\" &&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__: compose;\nexport const store = createStore(\n  rootReducer, // root reducer with router state\n  composeSetup(\n    applyMiddleware(\n      thunk,\n      routerMiddleware(history) // for dispatching history actions\n      // ... other middlewares ...\n    )\n  )\n);\n\nexport const persistor = persistStore(store);\n","import React, { useState, useEffect } from \"react\";\nimport \"./style.css\";\nimport clientLogo from \"../../assets/xyz-logo.png\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { withSnackbar } from \"notistack\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nfunction Login({ enqueueSnackbar }) {\n  const classes = useStyles();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const onSubmitForm = (e) => {\n    if (!username.length && !password.length) {\n      enqueueSnackbar(\"Favor de llenar todos los campos\", { variant: \"error\" });\n    } else {\n      const developerUser = JSON.parse(localStorage.getItem(\"currentUser\"));\n      if (\n        developerUser.username === username &&\n        developerUser.password === password\n      ) {\n        alert(\"ACCESS\");\n      } else {\n        enqueueSnackbar(\"Usuario o contraseña incorrectos\", {\n          variant: \"error\",\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"login__container\">\n      <div className=\"login__left-section\">\n        <img src={clientLogo} alt=\"client-logo\" />\n      </div>\n      <div className=\"login__right-section\">\n        <form className=\"login__form\">\n          <h1 className=\"login__title\">Iniciar Sesión</h1>\n          <div className=\"input-wrapper\">\n            <TextField\n              label=\"Usuario\"\n              fullWidth\n              variant=\"outlined\"\n              onChange={(e) => setUsername(e.target.value)}\n            />\n          </div>\n          <div className=\"input-wrapper\">\n            <TextField\n              label=\"Contraseña\"\n              type=\"password\"\n              fullWidth\n              variant=\"outlined\"\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </div>\n          <Button variant=\"contained\" color=\"primary\" onClick={onSubmitForm}>\n            ENTRAR\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default withSnackbar(Login);\n","import Login from \"./Login\";\nexport default Login;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { SnackbarProvider } from \"notistack\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { persistor } from \"./redux/config\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { blue } from \"@material-ui/core/colors\";\n//Views\nimport login from \"./views/login\";\n\nimport {\n  Route,\n  Switch,\n  BrowserRouter as Router,\n  Redirect,\n} from \"react-router-dom\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n\nfunction App() {\n  useEffect(() => {\n    const developerUser = {\n      username: \"dev\",\n      password: \"123\",\n    };\n    localStorage.setItem(\"currentUser\", JSON.stringify(developerUser));\n  }, []);\n  return (\n    <Router>\n      <PersistGate persistor={persistor}>\n        <ThemeProvider theme={theme}>\n          <SnackbarProvider maxSnack={3}>\n            <Switch>\n              <Route path=\"/\" component={login} />\n            </Switch>\n          </SnackbarProvider>\n        </ThemeProvider>\n      </PersistGate>\n    </Router>\n  );\n}\nlet mapStateToProps = (state) => ({});\nlet mapDispatchToProps = (dispatch) => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/config\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}